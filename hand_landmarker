import cv2
import numpy as np
import mediapipe as mp
from mediapipe.tasks import python
from mediapipe.tasks.python import vision
from mediapipe.framework.formats import landmark_pb2

# Constants
BOX_SIZE = 300
FONT_SIZE = 1.5
FONT_THICKNESS = 2
TEXT_COLOR = (0, 255, 0)

# Hand tracker setup
model_path = "hand_landmarker.task"
base_options = python.BaseOptions(model_asset_path=model_path)
options = vision.HandLandmarkerOptions(
    base_options=base_options,
    running_mode=vision.RunningMode.VIDEO,
    num_hands=2
)
detector = vision.HandLandmarker.create_from_options(options)

# Webcam init
cap = cv2.VideoCapture(0)
if not cap.isOpened():
    print("Error: Could not open webcam.")
    exit()

print("Running. Show both hands to count total fingers.")

# Finger counting logic (updated for both hands)
def count_fingers(landmarks, handedness_label):
    tips_ids = [4, 8, 12, 16, 20]  # Thumb, Index, Middle, Ring, Pinky
    fingers = []

    # Thumb direction logic
    if handedness_label == "Right":
        fingers.append(1 if landmarks[tips_ids[0]].x > landmarks[tips_ids[0] - 1].x else 0)
    else:
        fingers.append(1 if landmarks[tips_ids[0]].x < landmarks[tips_ids[0] - 1].x else 0)

    # Other fingers
    for i in range(1, 5):
        if landmarks[tips_ids[i]].y < landmarks[tips_ids[i] - 2].y:
            fingers.append(1)
        else:
            fingers.append(0)

    return sum(fingers)

# Main loop
while True:
    ret, frame = cap.read()
    if not ret:
        break

    height, width, _ = frame.shape
    rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
    mp_image = mp.Image(image_format=mp.ImageFormat.SRGB, data=rgb_frame)

    timestamp_ms = int(cv2.getTickCount() / cv2.getTickFrequency() * 1000)
    detection_result = detector.detect_for_video(mp_image, timestamp_ms)

    annotated_frame = np.copy(rgb_frame)
    total_fingers = 0

    if detection_result.hand_landmarks and detection_result.handedness:
        for i, hand in enumerate(detection_result.hand_landmarks):
            handedness_label = detection_result.handedness[i][0].category_name

            # Draw landmarks
            proto = landmark_pb2.NormalizedLandmarkList()
            proto.landmark.extend([
                landmark_pb2.NormalizedLandmark(x=lm.x, y=lm.y, z=lm.z) for lm in hand
            ])
            mp.solutions.drawing_utils.draw_landmarks(
                annotated_frame,
                proto,
                mp.solutions.hands.HAND_CONNECTIONS,
                mp.solutions.drawing_styles.get_default_hand_landmarks_style(),
                mp.solutions.drawing_styles.get_default_hand_connections_style()
            )

            # Count this hand's fingers
            total_fingers += count_fingers(hand, handedness_label)

    # Display total finger count
    cv2.putText(annotated_frame, f"Total: {total_fingers}", (width - 200, 50),
                cv2.FONT_HERSHEY_SIMPLEX, FONT_SIZE, TEXT_COLOR, FONT_THICKNESS, cv2.LINE_AA)

    # Show the result
    cv2.imshow("Total Finger Counter (Both Hands)", cv2.cvtColor(annotated_frame, cv2.COLOR_RGB2BGR))

    key = cv2.waitKey(1) & 0xFF
    if key == ord('q') or cv2.getWindowProperty("Total Finger Counter (Both Hands)", cv2.WND_PROP_VISIBLE) < 1:
        break

# Cleanup
cap.release()
cv2.destroyAllWindows()
